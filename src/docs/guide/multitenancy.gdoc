Multitenancy refers to a principle in software architecture where a single instance of the software runs on a server,
serving multiple client organizations (tenants).
Multitenancy is contrasted with a multi-instance architecture where separate software instances (or hardware systems)
are set up for different client organizations. With a multitenant architecture, a software application is designed to
virtually partition its data and configuration, and each client organization works with a customized virtual application instance.
Multitenancy is also regarded as one of the essential attributes of cloud computing. [Wikipedia|http://en.wikipedia.org/wiki/Multitenancy]

h2. Grails CRM has multitenancy built-in
Grails CRM implements a very simple approach to multitenancy. All domain classes that are tenant-specific
must have a @tenantId@ property of type @Long@. All code that work with tenant specific domain instances
must handle the tenantId property "manually". There is no automatic filtering going on behind the scenes.

The reason for not having automatic filtering (for example using Hibernate Filters) is that in Grails CRM
a user can access more than one tenant at a given time. Users can have roles and permissions that span
multiple tenants. There is still a notion of *current tenant* but certain features can access other
tenants that the user have access to. A calender view is a typical example where a user can see tasks from
different tenants in the same calendar view. Another example is a sales manager that want to view a forecast
from all regions in a country where each region is a separate tenant.
Therefore tenant filtering is done by business logic in services and controllers.
It's a freedom that brings with it great deal of responsibility and it requires serious *test coverage*.
One missing tenant filter somewhere can result in fatal security issues.

{warning}
You as a developer are responsible for tenant filtering. Never forget that. And always write tests!
{warning}

h3. Tenant-aware domain class
To make a domain class tenant-aware you add the @TenantEntity@ annotation to the class.

{code}
@TenantEntity
class Person {
  String name
}
{code}

This annotation trigger an AST transformation that adds a @Long tenantId@ property to the domain class.
The property is set to @TenantUtils.getTenant()@ when the domain class is instantiated.

h3. Current Tenant
Grails CRM resolves the current executing tenant from the HTTP request or the HTTP session.
The tenant resolver sets the current tenant in a ThreadLocal variable and you use the @TenantUtils.getTenant()@ to access it.

h3. Tenant aware query
{code}
def joe = Person.findByTenantIdAndName(TenantUtils.tenant, "Joe Average")
{code}
